
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 23 13:06:25 CST 2020
//----------------------------------------------------

package animaciones.Analizadores.Sintactico;

import animaciones.Analizadores.Semantico.TablaDeSimbolos;
import animaciones.Objetos.Lienzo;
import animaciones.Analizadores.Semantico.Objeto;
import java.util.ArrayList;
import animaciones.Objetos.Imagen;
import animaciones.Objetos.Tiempo;
import animaciones.ui.IDE;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 23 13:06:25 CST 2020
  */
public class AnalizadorSintacticoTiempo extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiempo() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiempo(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiempo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\007\000\002\003\003\000\002\004\005" +
    "\000\002\004\003\000\002\005\007\000\002\005\003\000" +
    "\002\006\005\000\002\006\003\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\010\007\000\002\010" +
    "\005\000\002\011\005\000\002\011\003\000\002\012\007" +
    "\000\002\012\005\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\006\003\004\012\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\073\001\002\000\006\003\011" +
    "\004\010\001\002\000\004\013\072\001\002\000\004\016" +
    "\012\001\002\000\004\013\ufffd\001\002\000\004\012\013" +
    "\001\002\000\006\003\016\022\015\001\002\000\006\013" +
    "\ufffb\017\070\001\002\000\004\016\021\001\002\000\006" +
    "\013\ufff9\017\ufff9\001\002\000\004\013\020\001\002\000" +
    "\004\013\ufffe\001\002\000\004\012\022\001\002\000\010" +
    "\006\027\010\026\011\025\001\002\000\004\013\067\001" +
    "\002\000\006\013\ufff7\017\065\001\002\000\004\016\061" +
    "\001\002\000\004\016\055\001\002\000\004\016\030\001" +
    "\002\000\004\014\031\001\002\000\004\012\033\001\002" +
    "\000\004\015\054\001\002\000\010\003\036\005\035\007" +
    "\034\001\002\000\004\016\050\001\002\000\004\016\046" +
    "\001\002\000\006\013\uffed\017\uffed\001\002\000\004\013" +
    "\043\001\002\000\006\013\ufff0\017\041\001\002\000\010" +
    "\003\036\005\035\007\034\001\002\000\004\013\ufff1\001" +
    "\002\000\006\015\ufff2\017\044\001\002\000\004\012\033" +
    "\001\002\000\004\015\ufff3\001\002\000\004\021\047\001" +
    "\002\000\006\013\uffee\017\uffee\001\002\000\004\020\051" +
    "\001\002\000\004\022\052\001\002\000\004\020\053\001" +
    "\002\000\006\013\uffef\017\uffef\001\002\000\006\013\ufff4" +
    "\017\ufff4\001\002\000\004\020\056\001\002\000\004\022" +
    "\057\001\002\000\004\020\060\001\002\000\006\013\ufff6" +
    "\017\ufff6\001\002\000\004\020\062\001\002\000\004\022" +
    "\063\001\002\000\004\020\064\001\002\000\006\013\ufff5" +
    "\017\ufff5\001\002\000\010\006\027\010\026\011\025\001" +
    "\002\000\004\013\ufff8\001\002\000\006\013\ufffa\017\ufffa" +
    "\001\002\000\006\003\016\022\015\001\002\000\004\013" +
    "\ufffc\001\002\000\004\002\000\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\016\005\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\022\007\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\031\001\001\000\002\001\001\000\006\011\036\012" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\041\012\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\065\007\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\070\005" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiempo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiempo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiempo$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean error;
    public boolean errorRecuperable;
    public TablaDeSimbolos tablaDeSimbolos;
        protected IDE ide;
    public  void setFrame(IDE frame){
        ide =frame;
    }
public void setTablaDeSimbolos(TablaDeSimbolos tablaDeSimbolos) {
        this.tablaDeSimbolos = tablaDeSimbolos;
    }
    public  void setTabla(TablaDeSimbolos tabla){
        this.tablaDeSimbolos =tabla;
    }

     public void syntax_error(Symbol s){
         
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        ide.escribirEnOutput("Error Sintactico Recuperado\n");
        ide.escribirEnOutput("\t \tLexema: "+ lexema+"\n");
        ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        ide.escribirEnOutput("Error Sintactico Panic Mode\n");
        ide.escribirEnOutput("\t \tLexema: "+ lexema+"\n");
        ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
    }
    
    public void mostrarElementoNoExistente(String nombreLienzo, Symbol s){
    ide.escribirEnOutput("Error Semantico \n");
    ide.escribirEnOutput("Lienzo \""+nombreLienzo+"\" no existe en El Archivo .lnz \n");

}

    public void ayudarConErrores(int tipo) {

        String texto = "Sugerencias Para Error:\n";
        switch (tipo) {
            case 1:
                texto += "Para los Imagenes los atributos permitidos son\n\t-id\n\t-duracion";
                break;
            case 5:
                texto += "Necesitas un id para cada lienzo de estructura alfanumerico como por ejemplo\n\tid_lienzo{...}\n";
                break;
            case 6:
                texto += "La estructura de este arhivo debe ser:\n {\nTIEMPOS:{...}\n}\n";
                break;
                
            default:
                throw new AssertionError();
        }
       ide.escribirEnOutput(texto);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiempo$actions {


    private boolean error =false;
    private boolean errorRecuperable=false;
        private Object[] atributosTiempo = new Object[3];
        private Object[] atributosImagen = new Object[2];
        private int indice =0;
    private void resetearAtributos(Object[] atributos){
        for(int i=0;i<atributos.length;i++){
            atributos[i]=null;
        }
    }


    public boolean getError(){
        return error;
    }
        protected void mostrarAtributoRepetido(String atributo, Symbol s,AnalizadorSintacticoTiempo ast) {
        ast.ide.escribirEnOutput("Error Semantico \n");
        ast.ide.escribirEnOutput("El atributo " + atributo + " se encuentra repetido\n");

        ast.ide.escribirEnOutput("\t \tFila: " + s.right + "\n");
        ast.ide.escribirEnOutput("\t \tColumna: " + s.left + "\n");

    }

    protected void mostrarElementoFaltante(Object[] atributos,int tipo, Symbol s,AnalizadorSintacticoTiempo ast) {
        ast.ide.escribirEnOutput("Atributo Faltante: \n");
        String text="";
        switch (tipo) {
            
            case 1:
                if(atributos[0]==null){
                    text+="\t-id\n";
                }
                if(atributos[1]==null){
                    text+="\t-duracion\n";
                }

                break;
            case 2:
                if(atributos[0]==null){
                    text+="\t-inicio\n";
                }
                if(atributos[1]==null){
                    text+="\t-fin\n";
                }
                if(atributos[1]==null){
                    text+="\t-imagenes\n";
                }
                break;
            
        }
        ast.ide.escribirEnOutput(text);
        ast.ide.escribirEnOutput("\t \tFila: " + s.right + "\n");
        ast.ide.escribirEnOutput("\t \tColumna: " + s.left + "\n");

    }


  private final AnalizadorSintacticoTiempo parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiempo$actions(AnalizadorSintacticoTiempo parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiempo$do_action(
    int                        CUP$AnalizadorSintacticoTiempo$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiempo$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiempo$stack,
    int                        CUP$AnalizadorSintacticoTiempo$top,AnalizadorSintacticoTiempo ast)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiempo$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiempo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Comp_Imagen ::= error 
            {
              Object RESULT =null;
		ast.ayudarConErrores(1);
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Comp_Imagen",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Comp_Imagen ::= DURACION DOS_PUNTOS Entero 
            {
              Object RESULT =null;
		int durleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()).left;
		int durright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()).right;
		String dur = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()).value;
		if(atributosImagen[1]==null){
                                                                    atributosImagen[1]=Integer.parseInt((String)dur);
                                                                }else{
                                                                    errorRecuperable=true;
                                                                    mostrarAtributoRepetido("Duracion"+Integer.parseInt((String)dur),((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()),ast);
                                                                 }
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Comp_Imagen",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Comp_Imagen ::= ID DOS_PUNTOS COMILLAS Id COMILLAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).value;
		if(atributosImagen[0]==null){
                                                   atributosImagen[0]=(String)id;
                                              }else{
                                                    errorRecuperable=true;
                                                    mostrarAtributoRepetido("Id :"+(String)id,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()),ast);
                                                }
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Comp_Imagen",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Comps_Imagen ::= Comp_Imagen 
            {
              Object RESULT =null;
		if(Lienzo.verificarObligatoriosTam(atributosImagen)){
                                        if(ast.tablaDeSimbolos.obtenerExistencia2((String)atributosImagen[0],TablaDeSimbolos.TIPO_IMAGEN)==null){
                                        
                                        Imagen im = new Imagen((String)atributosImagen[0],(Integer)atributosImagen[1],indice);
                                        indice ++;
                                        ast.tablaDeSimbolos.insertObject((String)atributosImagen[0],TablaDeSimbolos.TIPO_IMAGEN,im);
                                        RESULT=im;
                                        }else{
                                        mostrarAtributoRepetido("Imagen de Id "+(String)atributosImagen[0],((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()),ast); 
                                        RESULT =null;
                                        }
                                      }else{
                                        RESULT =null;
                                        errorRecuperable=true;
                                        mostrarElementoFaltante(atributosImagen,1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()),ast);
                                      }resetearAtributos(atributosImagen);
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Comps_Imagen",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Comps_Imagen ::= Comp_Imagen COMA Comps_Imagen 
            {
              Object RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()).left;
		int imright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()).right;
		Object im = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()).value;
		RESULT=im;
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Comps_Imagen",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Imagenes ::= LLAVE_A Comps_Imagen LLAVE_C 
            {
              Object RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).right;
		Object im = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).value;
		
                                                                        ArrayList<Imagen> imagenes= new ArrayList<>();
                                                                        if(im!=null){
                                                                        imagenes.add((Imagen) im);
                                                                        
                                                                        } RESULT= imagenes;
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Imagenes",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Imagenes ::= LLAVE_A Comps_Imagen LLAVE_C COMA Imagenes 
            {
              Object RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-3)).left;
		int imright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-3)).right;
		Object im = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-3)).value;
		int imsleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()).left;
		int imsright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()).right;
		Object ims = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()).value;
		
                                                                                ArrayList<Imagen> nuevas_imagenes= new ArrayList<>();
                                                                                if(im!=null){
                                                                        nuevas_imagenes.add((Imagen) im);
                                                                        }
                                                                        for(int i=0;i<((ArrayList<Imagen>)ims).size();i++){
                                                                        nuevas_imagenes.add(((ArrayList<Imagen>)ims).get(i));
                                                                         }
                                                                         RESULT= nuevas_imagenes;
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Imagenes",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Comp_Tiempo ::= IMAGENES DOS_PUNTOS CORCHETE_A Imagenes CORCHETE_C 
            {
              Object RESULT =null;
		int imaleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).left;
		int imaright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).right;
		Object ima = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).value;
		if(atributosTiempo[2]==null){
                                                   atributosTiempo[2]=(ArrayList<Imagen>)ima;
                                              }else{
                                                    errorRecuperable=true;
                                                    mostrarAtributoRepetido("Imagenes",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()),ast);
                                                }
                                                indice=0;
                                                                    
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Comp_Tiempo",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Comp_Tiempo ::= FIN DOS_PUNTOS COMILLAS Id COMILLAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).value;
		if(atributosTiempo[1]==null){
                                                   atributosTiempo[1]=(String)id;
                                              }else{
                                                    errorRecuperable=true;
                                                    mostrarAtributoRepetido("Fin",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()),ast);
                                                }
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Comp_Tiempo",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Comp_Tiempo ::= INICIO DOS_PUNTOS COMILLAS Id COMILLAS 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).value;
		if(atributosTiempo[0]==null){
                                                   atributosTiempo[0]=(String)id;
                                              }else{
                                                    errorRecuperable=true;
                                                    mostrarAtributoRepetido("Inicio",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()),ast);
                                                }
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Comp_Tiempo",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Comps_Tiempo ::= Comp_Tiempo 
            {
              Object RESULT =null;
		int tiempoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()).left;
		int tiemporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()).right;
		Object tiempo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()).value;
		if(Lienzo.verificarObligatoriosTam(atributosTiempo)){
                                                            Tiempo im = new Tiempo((String)atributosTiempo[0],(String)atributosTiempo[1],(ArrayList<Imagen>)atributosTiempo[2]);
                                                             RESULT=im;
                                                        }else{
                                                             RESULT =null;
                                                        errorRecuperable=true;
                                                         mostrarElementoFaltante(atributosTiempo,2,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()),ast);
                                                        }resetearAtributos(atributosTiempo);
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Comps_Tiempo",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Comps_Tiempo ::= Comp_Tiempo COMA Comps_Tiempo 
            {
              Object RESULT =null;
		int tiempoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()).left;
		int tiemporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()).right;
		Object tiempo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()).value;
		RESULT=tiempo;
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Comps_Tiempo",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Lienzo ::= error 
            {
              Object RESULT =null;
		ast.ayudarConErrores(5);errorRecuperable=true;
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Lienzo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lienzo ::= Id DOS_PUNTOS LLAVE_A Comps_Tiempo LLAVE_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-4)).value;
		int tiempoleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).left;
		int tiemporight = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).right;
		Object tiempo = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).value;
		 Tiempo tiempo1= (Tiempo)tiempo;
                if(ast.tablaDeSimbolos.obtenerExistencia((String)id,TablaDeSimbolos.TIPO_LIENZO)!=null){
                                                                
                                                            
                                                              Lienzo li =(Lienzo)((Objeto)(ast.tablaDeSimbolos.obtenerExistencia((String)id,TablaDeSimbolos.TIPO_LIENZO))).getValor();
                                                                        li.agregarInicioyFin(tiempo1.getIdInicio(),tiempo1.getIdFin());
                                                             for(int i=0;i<tiempo1.getImagenes().size();i++){
                                                                        
                                                                        ast.tablaDeSimbolos.asignaridPert(tiempo1.getImagenes().get(i).getId(),TablaDeSimbolos.TIPO_IMAGEN,(String) id);
                                                                       li.agregarImagen(tiempo1.getImagenes().get(i));                                                                                                                                                 
                                                             }
                                                            }else{
                                                                    for(int i=0;i<tiempo1.getImagenes().size();i++){
                                                                        
                                                                        ast.tablaDeSimbolos.eliminar(tiempo1.getImagenes().get(i).getId(),TablaDeSimbolos.TIPO_IMAGEN);
                                                                                                                                                                                                                       
                                                             }
                                                                  ast.mostrarElementoNoExistente((String)id,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.peek()));             
                                                            }
                                                             
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Lienzo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lienzos ::= Lienzo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Lienzos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lienzos ::= Lienzo COMA Lienzos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Lienzos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Cabecera ::= error 
            {
              Object RESULT =null;
		error=true;ast.ayudarConErrores(6);
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Cabecera",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Cabecera ::= TIEMPOS DOS_PUNTOS LLAVE_A Lienzos LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Cabecera",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= error 
            {
              Object RESULT =null;
		error=true;ast.ayudarConErrores(6);ast.error=this.error;ast.errorRecuperable=this.errorRecuperable;
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= LLAVE_A Cabecera LLAVE_C 
            {
              Object RESULT =null;
		ast.error=this.error;ast.errorRecuperable=this.errorRecuperable;
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoTiempo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiempo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.elementAt(CUP$AnalizadorSintacticoTiempo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoTiempo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiempo$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiempo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

