
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 22 23:58:22 CST 2020
//----------------------------------------------------

package animaciones.Analizadores.Sintactico;

import animaciones.Analizadores.Semantico.TablaDeSimbolos;
import animaciones.Objetos.Lienzo;
import animaciones.Analizadores.Semantico.Objeto;
import java.util.ArrayList;
import java.awt.Color;
import animaciones.ui.IDE;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 22 23:58:22 CST 2020
  */
public class AnalizadorSintacticoColores extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoColores() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoColores(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoColores(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\007\000\002\003\003\000\002\004\005" +
    "\000\002\004\003\000\002\005\007\000\002\005\003\000" +
    "\002\006\005\000\002\006\003\000\002\007\007\000\002" +
    "\010\003\000\002\010\004\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\006\003\004\011\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\060\001\002\000\006\003\011" +
    "\004\010\001\002\000\004\012\057\001\002\000\004\013" +
    "\012\001\002\000\004\012\ufffd\001\002\000\004\011\013" +
    "\001\002\000\006\003\016\017\015\001\002\000\006\012" +
    "\ufffb\014\055\001\002\000\004\013\021\001\002\000\006" +
    "\012\ufff9\014\ufff9\001\002\000\004\012\020\001\002\000" +
    "\004\012\ufffe\001\002\000\004\011\022\001\002\000\004" +
    "\017\023\001\002\000\004\013\031\001\002\000\004\012" +
    "\030\001\002\000\006\012\ufff7\014\026\001\002\000\004" +
    "\017\023\001\002\000\004\012\ufff8\001\002\000\006\012" +
    "\ufffa\014\ufffa\001\002\000\004\011\032\001\002\000\014" +
    "\003\035\005\034\006\036\007\037\010\040\001\002\000" +
    "\006\012\ufff2\014\053\001\002\000\004\016\052\001\002" +
    "\000\006\012\uffee\014\uffee\001\002\000\004\013\050\001" +
    "\002\000\004\013\046\001\002\000\004\013\044\001\002" +
    "\000\004\012\043\001\002\000\004\012\ufff5\001\002\000" +
    "\006\012\ufff6\014\ufff6\001\002\000\004\015\045\001\002" +
    "\000\006\012\uffef\014\uffef\001\002\000\004\015\047\001" +
    "\002\000\006\012\ufff0\014\ufff0\001\002\000\004\015\051" +
    "\001\002\000\006\012\ufff1\014\ufff1\001\002\000\004\012" +
    "\ufff4\001\002\000\012\003\035\006\036\007\037\010\040" +
    "\001\002\000\004\012\ufff3\001\002\000\006\003\016\017" +
    "\015\001\002\000\004\012\ufffc\001\002\000\004\002\000" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\056\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\016\005\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\023\007\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\026\007\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\040\011\041\012" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\053\012\032\001\001\000\002\001" +
    "\001\000\006\004\055\005\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoColores$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoColores$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoColores$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean error;
    public boolean errorRecuperable;
    public TablaDeSimbolos tablaDeSimbolos;
        protected IDE ide;
    public  void setFrame(IDE frame){
        ide =frame;
    }
public void setTablaDeSimbolos(TablaDeSimbolos tablaDeSimbolos) {
        this.tablaDeSimbolos = tablaDeSimbolos;
    }
    public  void setTabla(TablaDeSimbolos tabla){
        this.tablaDeSimbolos =tabla;
    }

     public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        ide.escribirEnOutput("Error Sintactico Recuperado\n");
        ide.escribirEnOutput("\t \tLexema: "+ lexema+"\n");
        ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        ide.escribirEnOutput("Error Sintactico Panic Mode\n");
        ide.escribirEnOutput("\t \tLexema: "+ lexema+"\n");
        ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
    }
    
    public void mostrarElementoNoExistente(String nombreLienzo, Symbol s){
    ide.escribirEnOutput("Error Semantico \n");
    ide.escribirEnOutput("Lienzo \""+nombreLienzo+"\" no existe en El Archivo .lnz \n");

}

    public void ayudarConErrores(int tipo) {

        String texto = "Sugerencias Para Error:\n";
        switch (tipo) {
            case 1:
                texto += "Para Los Colores las opciones son un codigo HEX que representa el numero o una descripcion RGB por ejemplo:"
                        + "\nRed:2,Green:3, Blue:20\n HEX: "
                        + "#FFF123\n";
                break;
            case 5:
                texto += "Necesitas un id para cada lienzo de estructura alfanumerico como por ejemplo\n\tid_lienzo{...}\n";
                break;
            case 6:
                texto += "La estructura de este arhivo debe ser:\n {\n\tCOLORES:{...}\n}\n";
                break;
                
            default:
                throw new AssertionError();
        }
       ide.escribirEnOutput(texto);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoColores$actions {


    private boolean error =false;
    private boolean errorRecuperable=false;
        private Object[] atributosColor = new Object[3];
    private void resetearAtributos(Object[] atributos){
        for(int i=0;i<atributos.length;i++){
            atributos[i]=null;
        }
    }


    public boolean getError(){
        return error;
    }
        protected void mostrarAtributoRepetido(String atributo, Symbol s,AnalizadorSintacticoColores asc) {
        asc.ide.escribirEnOutput("Error Semantico \n");
        asc.ide.escribirEnOutput("El atributo " + atributo + " se encuentra repetido\n");

        asc.ide.escribirEnOutput("\t \tFila: " + s.right + "\n");
        asc.ide.escribirEnOutput("\t \tColumna: " + s.left + "\n");

    }

    protected void mostrarElementoFaltante(Object[] atributos,int tipo, Symbol s,AnalizadorSintacticoColores asc) {
        asc.ide.escribirEnOutput("Atributo Faltante: \n");
        String text="";
        switch (tipo) {
            
            case 1:
                if(atributos[0]==null){
                    text+="\t-Red\n";
                }
                if(atributos[1]==null){
                    text+="\t-Green\n";
                }
                if(atributos[2]==null){
                     text+="\t-Blue\n";
                }
                break;
            
        }
        asc.ide.escribirEnOutput(text);
        asc.ide.escribirEnOutput("\t \tFila: " + s.right + "\n");
        asc.ide.escribirEnOutput("\t \tColumna: " + s.left + "\n");

    }


  private final AnalizadorSintacticoColores parser;

  /** Constructor */
  CUP$AnalizadorSintacticoColores$actions(AnalizadorSintacticoColores parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoColores$do_action(
    int                        CUP$AnalizadorSintacticoColores$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoColores$parser,
    java.util.Stack            CUP$AnalizadorSintacticoColores$stack,
    int                        CUP$AnalizadorSintacticoColores$top,AnalizadorSintacticoColores asc)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoColores$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoColores$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RGB ::= error 
            {
              Object RESULT =null;
		asc.ayudarConErrores(1);
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("RGB",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RGB ::= GREEN DOS_PUNTOS NumRGB 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()).value;
		if(atributosColor[1]==null){
                                                   atributosColor[1]=Integer.parseInt(num);
                                              }else{
                                                    errorRecuperable=true;
                                                    mostrarAtributoRepetido("Green",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()),asc);
                                                }
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("RGB",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RGB ::= BLUE DOS_PUNTOS NumRGB 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()).value;
		if(atributosColor[2]==null){
                                                   atributosColor[2]=Integer.parseInt(num);
                                              }else{
                                                    errorRecuperable=true;
                                                    mostrarAtributoRepetido("Blue",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()),asc);
                                                }
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("RGB",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RGB ::= RED DOS_PUNTOS NumRGB 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()).value;
		if(atributosColor[0]==null){
                                                   atributosColor[0]=Integer.parseInt(num);
                                              }else{
                                                    errorRecuperable=true;
                                                    mostrarAtributoRepetido("Red ",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()),asc);
                                                }
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("RGB",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CompRGBs ::= RGB 
            {
              Object RESULT =null;
		if(Lienzo.verificarObligatoriosTam(atributosColor)){
                                    Color color =Lienzo.construirColor(atributosColor);
                                    RESULT=color;
                                    }else{
                                      errorRecuperable=true;
                                       mostrarElementoFaltante(atributosColor,1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()),asc);
                                                                    } 
                                                                    resetearAtributos(atributosColor);
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("CompRGBs",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CompRGBs ::= RGB COMA CompRGBs 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()).value;
		RESULT =com;
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("CompRGBs",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Color ::= HEX NumHEX 
            {
              Object RESULT =null;
		int numColorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).left;
		int numColorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).right;
		String numColor = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()).value;
		Color color =Lienzo.construirColor((String)numColor);
                                        RESULT =color;
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("Color",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Color ::= CompRGBs 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()).value;
		RESULT =color;
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("Color",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Id_Color ::= Id DOS_PUNTOS LLAVE_A Color LLAVE_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-4)).value;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-1)).value;
		if(color !=null){
                                                                Objeto ob = new Objeto((String)id,TablaDeSimbolos.TIPO_COLOR,(Color)color);
                                                                RESULT =ob;
                                                                }else{RESULT =null;}
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("Id_Color",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Id_Colores ::= Id_Color 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()).value;
		
                                                                        ArrayList<Objeto> objetos= new ArrayList<>();
                                                                        if(color!=null){
                                                                        objetos.add((Objeto) color);
                                                                        
                                                                        } RESULT= objetos;
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("Id_Colores",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Id_Colores ::= Id_Color COMA Id_Colores 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-2)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-2)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-2)).value;
		int coloresleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).left;
		int coloresright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()).right;
		Object colores = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()).value;
		
                                                                                ArrayList<Objeto> objetos= new ArrayList<>();
                                                                                if(color!=null){
                                                                        objetos.add((Objeto) color);
                                                                        }
                                                                        for(int i=0;i<((ArrayList<Objeto>)colores).size();i++){
                                                                        objetos.add(((ArrayList<Objeto>)colores).get(i));
                                                                         }
                                                                         RESULT= objetos;
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("Id_Colores",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Lienzo ::= error 
            {
              Object RESULT =null;
		asc.ayudarConErrores(5);
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("Lienzo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lienzo ::= Id DOS_PUNTOS LLAVE_A Id_Colores LLAVE_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-4)).value;
		int coloresleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-1)).left;
		int coloresright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-1)).right;
		Object colores = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-1)).value;
		if(asc.tablaDeSimbolos.obtenerExistencia((String)id,TablaDeSimbolos.TIPO_LIENZO)!=null){
                                                                
                                                             ArrayList<Objeto> objetos= (ArrayList<Objeto>)colores;
                                                             for(int i=0;i<objetos.size();i++){
                                                                        
                                                                        if(asc.tablaDeSimbolos.obtenerExistencia(objetos.get(i).getId(),
                                                                        TablaDeSimbolos.TIPO_COLOR,(String)id)==null){
                                                                        Lienzo li =(Lienzo)((Objeto)(asc.tablaDeSimbolos.obtenerExistencia((String)id,TablaDeSimbolos.TIPO_LIENZO))).getValor();
                                                                        li.agregarColor((Color)objetos.get(i).getValor(),objetos.get(i).getId() );
                                                                        asc.tablaDeSimbolos.insertObject(objetos.get(i).getId(),
                                                                        TablaDeSimbolos.TIPO_COLOR,objetos.get(i).getValor(),(String)id);
                                                                        
                                                                         }else{
                                                                        mostrarAtributoRepetido("Color de Id "+objetos.get(i).getId(),((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()),asc); 
                                                                        };
                                                             }
                                                            }else{
                                                                  asc.mostrarElementoNoExistente((String)id,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.peek()));             
                                                            }
                                                             
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("Lienzo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lienzos ::= Lienzo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("Lienzos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lienzos ::= Lienzo COMA Lienzos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("Lienzos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Cabecera ::= error 
            {
              Object RESULT =null;
		error=true;asc.ayudarConErrores(6);
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("Cabecera",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Cabecera ::= COLORES DOS_PUNTOS LLAVE_A Lienzos LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("Cabecera",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= error 
            {
              Object RESULT =null;
		error=true;asc.ayudarConErrores(6);asc.error=this.error;asc.errorRecuperable=this.errorRecuperable;
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= LLAVE_A Cabecera LLAVE_C 
            {
              Object RESULT =null;
		asc.error=this.error;asc.errorRecuperable=this.errorRecuperable;
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoColores$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoColores$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.elementAt(CUP$AnalizadorSintacticoColores$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoColores$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoColores$parser.done_parsing();
          return CUP$AnalizadorSintacticoColores$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

