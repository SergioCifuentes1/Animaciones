
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri May 22 00:29:55 CST 2020
//----------------------------------------------------

package animaciones.Analizadores.Sintactico;

import animaciones.Analizadores.Semantico.TablaDeSimbolos;
import animaciones.Objetos.Lienzo;
import java.awt.Dimension;
import java.awt.Color;
import animaciones.ui.IDE;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri May 22 00:29:55 CST 2020
  */
public class AnalizadorSintacticoLienzo extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoLienzo() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoLienzo(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoLienzo(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\005\000\002\002" +
    "\003\000\002\003\007\000\002\003\003\000\002\004\005" +
    "\000\002\004\003\000\002\005\007\000\002\005\003\000" +
    "\002\006\005\000\002\006\003\000\002\007\007\000\002" +
    "\007\007\000\002\007\007\000\002\007\007\000\002\007" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\011\003\000\002\011\004\000\002\012\005\000" +
    "\002\012\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\015" +
    "\003\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\003\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\006\003\004\022\006\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\122\001\002\000\006\003\010" +
    "\004\011\001\002\000\004\023\121\001\002\000\004\023" +
    "\ufffd\001\002\000\004\024\012\001\002\000\004\022\013" +
    "\001\002\000\006\003\016\031\015\001\002\000\006\023" +
    "\ufffb\025\117\001\002\000\004\024\021\001\002\000\006" +
    "\023\ufff9\025\ufff9\001\002\000\004\023\020\001\002\000" +
    "\004\023\ufffe\001\002\000\004\022\022\001\002\000\014" +
    "\003\024\005\030\006\023\012\031\015\025\001\002\000" +
    "\004\024\074\001\002\000\006\023\ufff2\025\ufff2\001\002" +
    "\000\004\024\050\001\002\000\004\023\047\001\002\000" +
    "\006\023\ufff7\025\045\001\002\000\004\024\041\001\002" +
    "\000\004\024\032\001\002\000\004\026\033\001\002\000" +
    "\010\003\036\013\037\014\034\001\002\000\004\026\ufff0" +
    "\001\002\000\004\026\040\001\002\000\004\026\uffef\001" +
    "\002\000\004\026\ufff1\001\002\000\006\023\ufff5\025\ufff5" +
    "\001\002\000\004\026\042\001\002\000\004\033\043\001" +
    "\002\000\004\026\044\001\002\000\006\023\ufff6\025\ufff6" +
    "\001\002\000\014\003\024\005\030\006\023\012\031\015" +
    "\025\001\002\000\004\023\ufff8\001\002\000\006\023\ufffa" +
    "\025\ufffa\001\002\000\004\022\051\001\002\000\014\003" +
    "\053\016\054\017\055\020\056\021\057\001\002\000\006" +
    "\023\uffeb\025\072\001\002\000\006\023\uffe7\025\uffe7\001" +
    "\002\000\004\030\071\001\002\000\004\024\067\001\002" +
    "\000\004\024\065\001\002\000\004\024\063\001\002\000" +
    "\004\023\062\001\002\000\004\023\uffee\001\002\000\006" +
    "\023\ufff4\025\ufff4\001\002\000\004\027\064\001\002\000" +
    "\006\023\uffe8\025\uffe8\001\002\000\004\027\066\001\002" +
    "\000\006\023\uffe9\025\uffe9\001\002\000\004\027\070\001" +
    "\002\000\006\023\uffea\025\uffea\001\002\000\004\023\uffed" +
    "\001\002\000\012\003\053\017\055\020\056\021\057\001" +
    "\002\000\004\023\uffec\001\002\000\004\022\075\001\002" +
    "\000\012\003\077\007\103\010\101\011\076\001\002\000" +
    "\004\024\115\001\002\000\006\023\uffe1\025\uffe1\001\002" +
    "\000\006\023\uffe5\025\113\001\002\000\004\024\111\001" +
    "\002\000\004\023\110\001\002\000\004\024\104\001\002" +
    "\000\006\027\106\032\107\001\002\000\006\023\uffe4\025" +
    "\uffe4\001\002\000\006\023\uffdf\025\uffdf\001\002\000\006" +
    "\023\uffe0\025\uffe0\001\002\000\006\023\ufff3\025\ufff3\001" +
    "\002\000\006\027\106\032\107\001\002\000\006\023\uffe3" +
    "\025\uffe3\001\002\000\012\003\077\007\103\010\101\011" +
    "\076\001\002\000\004\023\uffe6\001\002\000\006\027\106" +
    "\032\107\001\002\000\006\023\uffe2\025\uffe2\001\002\000" +
    "\006\003\016\031\015\001\002\000\004\023\ufffc\001\002" +
    "\000\004\002\000\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\004\016\005\013\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\025\007\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\045" +
    "\007\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\011\057\012\060\014\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\072\014\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\101\016\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\111\001\001\000\002\001" +
    "\001\000\006\015\113\016\077\001\001\000\002\001\001" +
    "\000\004\013\115\001\001\000\002\001\001\000\006\004" +
    "\117\005\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoLienzo$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoLienzo$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoLienzo$do_action(act_num, parser, stack, top,this);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public boolean error;
    public boolean errorRecuperable;
    public TablaDeSimbolos tablaDeSimbolos;
        protected IDE ide;
    public  void setFrame(IDE frame){
        ide =frame;
    }
public void setTablaDeSimbolos(TablaDeSimbolos tablaDeSimbolos) {
        this.tablaDeSimbolos = tablaDeSimbolos;
    }
    public  void setTabla(TablaDeSimbolos tabla){
        this.tablaDeSimbolos =tabla;
    }

     public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        ide.escribirEnOutput("Error Sintactico Recuperado\n");
        ide.escribirEnOutput("\t \tLexema: "+ lexema+"\n");
        ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        ide.escribirEnOutput("Error Sintactico Panic Mode\n");
        ide.escribirEnOutput("\t \tLexema: "+ lexema+"\n");
        ide.escribirEnOutput("\t \tFila: "+ fila+"\n");
        ide.escribirEnOutput("\t \tColumna: "+ columna+"\n");
    }
    
    public void ayudarConErrores(int tipo) {

        String texto = "Sugerencias Para Error:\n";
        switch (tipo) {
            case 1:
                texto += "Para Tamaño los unicos atributos permitidos son: \n cuadro, dimension_x y dimension_y";
                break;
            case 2:
                texto += "Para el Fondo las opciones son un codigo HEX que representa el numero o ua describcion RGB por ejemplo:"
                        + "\nRed:2,Green:3, Blue:20\n HEX: "
                        + "#FFF123";
                break;
            case 3:
                texto += "Las Opciones Para Tipo Son :\n\t-\"git\"\n\t-\"png\"";
                break;
            case 4:
                texto += "Los Componentes para construir un Lienzo son:\n\t-nombre\n\t-Fondo\n\t-tipo\n\t-tamaño";
                break;
            case 5:
                texto += "Para construir un lienzo debes de ingresar un id\nSolo puede contener caracteres alfanuméricos\n no puede tener espacios en blanco o caracteres especiales.\n ejemplo: lienzo1:{...}";
                break;
            case 6:
                texto += "La estructura de este arhivo debe ser:\n {\n\tLIENZOS:{...}\n}";
                break;
                
            default:
                throw new AssertionError();
        }
       ide.escribirEnOutput(texto);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoLienzo$actions {


    private boolean error =false;
    private boolean errorRecuperable=false;
    private Object[] atributosTam = new Object[3];
    private Object[] atributosLienzo = new Object[5];
        private Object[] atributosColor = new Object[3];
    private void resetearAtributos(Object[] atributos){
        for(int i=0;i<atributos.length;i++){
            atributos[i]=null;
        }
    }


    public boolean getError(){
        return error;
    }
        protected void mostrarAtributoRepetido(String atributo, Symbol s,AnalizadorSintacticoLienzo asl) {
            asl.ide.escribirEnOutput("Error Semantico \n");
        asl.ide.escribirEnOutput("El atributo " + atributo + " se encuentra repetido\n");

        asl.ide.escribirEnOutput("\t \tFila: " + s.right + "\n");
        asl.ide.escribirEnOutput("\t \tColumna: " + s.left + "\n");

    }

    protected void mostrarElementoFaltante(Object[] atributos,int tipo, Symbol s,AnalizadorSintacticoLienzo asl) {
        asl.ide.escribirEnOutput("Atributo Faltante: \n");
        String text="";
        switch (tipo) {
            case 1:
                if(atributos[0]==null){
                    text+="\t-cuadro\n";
                }
                if(atributos[1]==null){
                    text+="\t-dimesion_x\n";
                }
                if(atributos[2]==null){
                     text+="\t-dimesion_y\n";
                }
                break;
            case 2:
                if(atributos[0]==null){
                    text+="\t-Red\n";
                }
                if(atributos[1]==null){
                    text+="\t-Green\n";
                }
                if(atributos[2]==null){
                     text+="\t-Blue\n";
                }
                break;
            case 3:
                if(atributos[0]==null){
                    text+="\t-nombre\n";
                }
                if(atributos[1]==null){
                    text+="\t-tipo\n";
                }
                if(atributos[2]==null){
                     text+="\t-Fondo\n";
                }
                if(atributos[3]==null){
                     text+="\t-tamaño\n";
                }
                break;
        }
        asl.ide.escribirEnOutput(text);
        asl.ide.escribirEnOutput("\t \tFila: " + s.right + "\n");
        asl.ide.escribirEnOutput("\t \tColumna: " + s.left + "\n");

    }


  private final AnalizadorSintacticoLienzo parser;

  /** Constructor */
  CUP$AnalizadorSintacticoLienzo$actions(AnalizadorSintacticoLienzo parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoLienzo$do_action(
    int                        CUP$AnalizadorSintacticoLienzo$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoLienzo$parser,
    java.util.Stack            CUP$AnalizadorSintacticoLienzo$stack,
    int                        CUP$AnalizadorSintacticoLienzo$top,AnalizadorSintacticoLienzo asl)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoLienzo$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoLienzo$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Numero ::= NumRGB 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()).value;
		RESULT=num;
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Numero",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Numero ::= Entero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()).value;
		RESULT=num;
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Numero",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CompTam ::= error 
            {
              Object RESULT =null;
		asl.ayudarConErrores(1);
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("CompTam",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CompTam ::= DIM_Y DOS_PUNTOS Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()).value;
		if(atributosTam[2]==null){
                                                   atributosTam[2]=Integer.parseInt((String)num);
                                              }else{
                                                    errorRecuperable=true;
                                                    mostrarAtributoRepetido("Numero De Dimension Y",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);
                                                }
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("CompTam",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CompTam ::= DIM_X DOS_PUNTOS Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()).value;
		if(atributosTam[1]==null){
                                                   atributosTam[1]=Integer.parseInt((String)num);
                                              }else{
                                                    errorRecuperable=true;
                                                    mostrarAtributoRepetido("Numero De Dimension X",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);
                                                }
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("CompTam",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CompTam ::= CUADRO DOS_PUNTOS Numero 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()).value;
		if(atributosTam[0]==null){
                                                   atributosTam[0]=Integer.parseInt((String)num);
                                              }else{
                                                    errorRecuperable=true;
                                                    mostrarAtributoRepetido("Numero De Cuadro",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);
                                                }
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("CompTam",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CompsTamaño ::= CompTam 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("CompsTamaño",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CompsTamaño ::= CompTam COMA CompsTamaño 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("CompsTamaño",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // RGB ::= error 
            {
              Object RESULT =null;
		asl.ayudarConErrores(2);
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("RGB",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RGB ::= GREEN DOS_PUNTOS NumRGB 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()).value;
		if(atributosColor[1]==null){
                                                   atributosColor[1]=Integer.parseInt(num);
                                              }else{
                                                    errorRecuperable=true;
                                                    mostrarAtributoRepetido("Green",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);
                                                }
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("RGB",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // RGB ::= BLUE DOS_PUNTOS NumRGB 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()).value;
		if(atributosColor[2]==null){
                                                   atributosColor[2]=Integer.parseInt(num);
                                              }else{
                                                    errorRecuperable=true;
                                                    mostrarAtributoRepetido("Blue",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);
                                                }
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("RGB",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RGB ::= RED DOS_PUNTOS NumRGB 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()).value;
		if(atributosColor[0]==null){
                                                   atributosColor[0]=Integer.parseInt(num);
                                              }else{
                                                    errorRecuperable=true;
                                                    mostrarAtributoRepetido("Red ",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);
                                                }
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("RGB",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CompRGBs ::= RGB 
            {
              Object RESULT =null;
		if(Lienzo.verificarObligatoriosTam(atributosColor)){
                                    Color color =Lienzo.construirColor(atributosColor);
                                    RESULT=color;
                                    }else{
                                      errorRecuperable=true;
                                       mostrarElementoFaltante(atributosColor,2,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);
                                                                    } 
                                                                    resetearAtributos(atributosColor);
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("CompRGBs",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CompRGBs ::= RGB COMA CompRGBs 
            {
              Object RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()).value;
		RESULT =com;
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("CompRGBs",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Color ::= HEX NumHEX 
            {
              Object RESULT =null;
		int numColorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).left;
		int numColorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).right;
		String numColor = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()).value;
		Color color =Lienzo.construirColor((String)numColor);
                                        RESULT =color;
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Color",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Color ::= CompRGBs 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()).value;
		RESULT =color;
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Color",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= error 
            {
              Object RESULT =null;
		asl.ayudarConErrores(3);RESULT =null;
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Tipo ::= GIF 
            {
              Object RESULT =null;
		RESULT = Lienzo.TIPO_GIF;
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= PNG 
            {
              Object RESULT =null;
		RESULT = Lienzo.TIPO_PNG;
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Tipo",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Componente ::= error 
            {
              Object RESULT =null;
		asl.ayudarConErrores(4);
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Componente",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Componente ::= TAMAÑO DOS_PUNTOS LLAVE_A CompsTamaño LLAVE_C 
            {
              Object RESULT =null;
		 if(atributosLienzo[3]==null){
                                                                        if(Lienzo.verificarObligatoriosTam(atributosTam)){
                                                                        atributosLienzo[3]=(Integer)atributosTam[0];
                                                                        atributosLienzo[4]=new Dimension((Integer)atributosTam[1], (Integer)atributosTam[2]);
                                                                    }else{
                                                                    errorRecuperable=true;
                                                                        mostrarElementoFaltante(atributosTam,1,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);
                                                                    }
                                                                        }else{
                                                                           mostrarAtributoRepetido("TAMAÑO",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);  
                                                                        }
                                                                    resetearAtributos(atributosTam);
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Componente",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Componente ::= FONDO DOS_PUNTOS LLAVE_A Color LLAVE_C 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)).value;
		if(atributosLienzo[2]==null){
                                                                            if(color!=null){
                                                                                atributosLienzo[2]=color;
                                                                            }
                                                                        }else{
                                                                            mostrarAtributoRepetido("Fondo",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);  
                                                                        }
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Componente",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Componente ::= TIPO DOS_PUNTOS COMILLAS Tipo COMILLAS 
            {
              Object RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)).value;
		if(atributosLienzo[1]==null){
                                                                                if(ti!=null){
                                                                                    atributosLienzo[1]=ti;
                                                                                 }
                                                                              }else{
                                                                                mostrarAtributoRepetido("Tipo",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);  
                                                                                }
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Componente",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Componente ::= NOMBRE DOS_PUNTOS COMILLAS Nombre COMILLAS 
            {
              Object RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)).value;
		if(atributosLienzo[0]==null){
                                                                                if(nom!=null){
                                                                                    atributosLienzo[0]=nom;
                                                                                 }
                                                                              }else{
                                                                                mostrarAtributoRepetido("Nombre",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);  
                                                                                }
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Componente",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Componentes ::= Componente 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Componentes",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Componentes ::= Componente COMA Componentes 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Componentes",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Lienzo ::= error 
            {
              Object RESULT =null;
		asl.ayudarConErrores(5);
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Lienzo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Lienzo ::= Id DOS_PUNTOS LLAVE_A Componentes LLAVE_C 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-4)).value;
		if(asl.tablaDeSimbolos.obtenerExistencia((String)id,TablaDeSimbolos.TIPO_LIENZO)==null){
                                                                if(Lienzo.verificarObligatoriosTam(atributosLienzo)){
                                                                Lienzo lienzo = new Lienzo(atributosLienzo);
                                                                lienzo.setId((String)id);
                                                                asl.tablaDeSimbolos.insertObject((String)id,TablaDeSimbolos.TIPO_LIENZO
                                                                ,lienzo);
                                                                }else{
                                                                    mostrarElementoFaltante(atributosLienzo,3,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);
                                                                }
                                                            }else{
                                                                  mostrarAtributoRepetido("Linzo de id "+(String)id,((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.peek()),asl);  
                                                                               
                                                            }resetearAtributos(atributosLienzo);
                                                             
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Lienzo",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Lienzos ::= Lienzo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Lienzos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Lienzos ::= Lienzo COMA Lienzos 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Lienzos",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Cabecera ::= error 
            {
              Object RESULT =null;
		error=true;asl.ayudarConErrores(6);
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Cabecera",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Cabecera ::= LIENZOS DOS_PUNTOS LLAVE_A Lienzos LLAVE_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Cabecera",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicio ::= error 
            {
              Object RESULT =null;
		error=true;asl.ayudarConErrores(6);asl.error=this.error;asl.errorRecuperable=this.errorRecuperable;
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicio ::= LLAVE_A Cabecera LLAVE_C 
            {
              Object RESULT =null;
		asl.error=this.error;asl.errorRecuperable=this.errorRecuperable;
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("Inicio",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLienzo$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoLienzo$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.elementAt(CUP$AnalizadorSintacticoLienzo$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLienzo$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoLienzo$parser.done_parsing();
          return CUP$AnalizadorSintacticoLienzo$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

